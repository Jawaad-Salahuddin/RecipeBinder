@page "/Recipes/Delete/{Id:int}"

@attribute [Authorize]
@inject RecipeService RecipeService
@inject IConfiguration configuration

@if (canEdit || isAdmin)
{
    <EditForm Model="@recipe" OnSubmit="@SubmitAsync">
        <h1>Are you sure you want to delete this recipe?</h1>
        <button type="submit" class="btn btn-danger my-3">Delete</button>
    </EditForm>

    <table class="table my-3">
        <tr>
            <th>Name</th>
            <td>@recipe.Name</td>
        </tr>
        <tr>
            <th>Ingredients</th>
            <td>
                <ul>
                    @foreach (Ingredient ingredient in recipe.Ingredients)
                    {
                        <li>@ingredient.Quantity @ingredient.Name</li>
                    }
                </ul>
            </td>
        </tr>
        <tr>
            <th>Directions</th>
            <td>
                <ol>
                    @foreach (Direction direction in recipe.Directions.OrderBy(d => d.Step))
                    {
                        <li>@direction.Description</li>
                    }
                </ol>
            </td>
        </tr>
        <tr>
            <th>Categories</th>
            <td>
                @foreach (RecipeCategory recipeCategory in recipe.RecipeCategories)
                {
                    @if (recipeCategory.Category != null)
                    {
                        <span class="badge badge-pill badge-dark">@recipeCategory.Category.Name</span>
                    }
                }
            </td>
        </tr>
        <tr>
            <th>Prep Time</th>
            <td>@recipe.PrepTime</td>
        </tr>
        <tr>
            <th>Cook Time</th>
            <td>@recipe.CookTime</td>
        </tr>
        <tr>
            <th>Servings</th>
            <td>@recipe.Servings</td>
        </tr>
        <tr>
            <th>YouTube URL</th>
            <td>
                <a href="@recipe.Video" target="_blank" rel="noopener noreferrer">@recipe.Video</a>
            </td>
        </tr>
        <tr>
            <th>Likes</th>
            <td>@recipe.Likes.Count</td>
        </tr>
        <tr>
            <th>Created By</th>
            <td>@recipe.Owner</td>
        </tr>
        @if (recipe.Restricted)
        {
            <tr>
                <th>Users with Access</th>
                <td>
                    <ul>
                        @foreach (Reader reader in recipe.Readers)
                        {
                            @if (reader.Editor)
                            {
                                <li>@reader.Email (Edit Access)</li>
                            }
                            else
                            {
                                <li>@reader.Email</li>
                            }
                        }
                    </ul>
                </td>
            </tr>
        }
    </table>
}
else
{
    <p>Not authorized</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private bool canEdit = false;

    private bool isAdmin = false;

    private Recipe recipe = new Recipe();

    protected override async Task OnInitializedAsync()
    {
        recipe = await RecipeService.GetAsync(Id);
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string user = authState.User.Identity.Name;
        isAdmin = user == configuration["Admin"];
        canEdit = user == recipe.Owner || recipe.Readers.Where(u => u.Editor).Any(u => user == u.Email);
    }

    /// <summary>
    /// Submits deletion
    /// </summary>
    public async Task SubmitAsync()
    {
        await RecipeService.DeleteAsync(recipe);
        NavigationManager.NavigateTo($"/Recipes");
    }
}
