@inject RecipeService RecipeService
@inject CategoryService CategoryService

<EditForm Model="@recipe" OnSubmit="@SubmitAsync">
    <div class="d-xl-inline-block">
        <h1>@operation Recipe</h1>
    </div>
    <div class="float-xl-right">
        <div class="btn-group">
            <button type="submit" class="d-none" disabled></button>
            <button type="submit" class="btn btn-primary">Save</button>
            <NavLink href="@link" class="btn btn-light">Go Back</NavLink>
        </div>
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <ul class="nav nav-tabs">
        <li class="nav-item cursor-pointer" @onclick="(() => ToggleTab(0))">
            <a class="@styles[0]">General</a>
        </li>
        <li class="nav-item cursor-pointer" @onclick="(() => ToggleTab(1))">
            <a class="@styles[1]">Ingredients</a>
        </li>
        <li class="nav-item cursor-pointer" @onclick="(() => ToggleTab(2))">
            <a class="@styles[2]">Directions</a>
        </li>
        <li class="nav-item cursor-pointer" @onclick="(() => ToggleTab(3))">
            <a class="@styles[3]">Permissions</a>
        </li>
    </ul>
    <div class="tab-content">
        <br />
        @if (tab == 0)
        {
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="recipe.Name" class="form-control"></InputText>
            </div>
            <div class="row">
                <div class="col-xl-4">
                    <div class="form-group">
                        <label>Prep Time</label>
                        <InputText @bind-Value="recipe.PrepTime" class="form-control"></InputText>
                    </div>
                </div>
                <div class="col-xl-4">
                    <div class="form-group">
                        <label>Cook Time</label>
                        <InputText @bind-Value="recipe.CookTime" class="form-control"></InputText>
                    </div>
                </div>
                <div class="col-xl-4">
                    <div class="form-group">
                        <label>Servings</label>
                        <InputText @bind-Value="recipe.Servings" class="form-control"></InputText>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Categories</label><br />
                @foreach (RecipeCategory recipeCategory in recipe.RecipeCategories)
                {
                    <span class="badge badge-pill badge-dark">@recipeCategory.Category.Name</span>
                    <a @onclick="(() => RemoveCategoryAsync(recipeCategory))">🗙</a>
                }
                <hr />
                <input @bind-value="search" @bind-value:event="oninput" @onkeyup="EnterCategoryAsync" type="search" class="form-control" placeholder="Press enter to add a category" />
                <label class="mt-xl-3">Click on a category below to add</label><br />
                @foreach (Category category in categories)
                {
                    <a @onclick="(() => AddCategoryAsync(category))" class="badge badge-pill badge-dark text-white">@category.Name</a>
                }
            </div>
        }
        else if (tab == 1)
        {
            if (recipe.Ingredients.Count() > 0)
            {
                <div class="row">
                    <div class="col-xl-8">
                        <label>Name</label>
                    </div>
                    <div class="col-xl-4">
                        <label>Quantity</label>
                    </div>
                </div>
                for (int i = 0; i < recipe.Ingredients.Count(); i++)
                {
                    Ingredient ingredient = recipe.Ingredients[i];
                    <div class="form-group">
                        <div class="row">
                            <div class="col-xl-8">
                                <InputText @bind-Value="ingredient.Name" class="form-control"></InputText>
                            </div>
                            <div class="col-xl-3">
                                <InputText @bind-Value="ingredient.Quantity" class="form-control"></InputText>
                            </div>
                            <div class="col-xl-1">
                                <button @onclick="(() => recipe.Ingredients.Remove(ingredient))" type="button" class="btn btn-secondary">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="form-group">
                <button @onclick="(() => recipe.Ingredients.Add(new Ingredient()))" type="button" class="btn btn-secondary">
                    <span class="oi oi-plus"></span> New Ingredient
                </button>
            </div>
        }
        else if (tab == 2)
        {
            if (recipe.Directions.Count() > 0)
            {
                <div class="row">
                    <div class="col-xl-1">
                        <label>Step</label>
                    </div>
                    <div class="col-xl-11">
                        <label>Description</label>
                    </div>
                </div>
                for (int i = 0; i < recipe.Directions.Count(); i++)
                {
                    Direction direction = recipe.Directions[i];
                    <div class="form-group">
                        <div class="row">
                            <div class="col-xl-1">
                                <InputSelectNumber @bind-Value="direction.Step" class="form-control">
                                    @foreach (int step in steps.OrderBy(s => s))
                                                {
                                        <option value="@step">@step</option>
                                                }
                                </InputSelectNumber>
                            </div>
                            <div class="col-xl-10">
                                <InputTextArea @bind-Value="direction.Description" class="form-control"></InputTextArea>
                            </div>
                            <div class="col-xl-1">
                                <button @onclick="(() => RemoveDirection(direction))" type="button" class="btn btn-secondary">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="form-group">
                <button @onclick="(() => AddDirection())" type="button" class="btn btn-secondary">
                    <span class="oi oi-plus"></span> New Direction
                </button>
            </div>
        }
        else if (tab == 3)
        {
            <div class="form-group">
                <div class="custom-control custom-switch">
                    <InputCheckbox @bind-Value="recipe.Restricted" class="custom-control-input" id="restricted"></InputCheckbox>
                    <label class="custom-control-label" for="restricted">Only users listed below can view this recipe</label>
                </div>
            </div>
            if (recipe.Restricted)
            {
                if (recipe.Users.Count() > 0)
                {
                    <div class="row">
                        <div class="col-xl-6">
                            <label>Email Address</label>
                        </div>
                        <div class="col-xl-6">
                            <label>Access Level</label>
                        </div>
                    </div>
                    for (int i = 0; i < recipe.Users.Count(); i++)
                    {
                        User user = recipe.Users[i];
                        <div class="form-group">
                            <div class="row">
                                <div class="col-xl-6">
                                    <InputText @bind-Value="user.Email"></InputText>
                                </div>
                                <div class="col-xl-5">
                                    <div class="custom-control custom-switch">
                                        <InputCheckbox @bind-Value="user.Editor" class="custom-control-input" id="@($"editor{user.Email}")"></InputCheckbox>
                                        <label class="custom-control-label" for="@($"editor{user.Email}")">Edit</label>
                                    </div>
                                </div>
                                <div class="col-xl-1">
                                    <button @onclick="(() => recipe.Users.Remove(user))" type="button" class="btn btn-secondary">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
                <div class="form-group">
                    <button @onclick="(() => recipe.Users.Add(new User()))" type="button" class="btn btn-secondary">
                        <span class="oi oi-plus"></span> New User
                    </button>
                </div>
            }
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public Recipe recipe { get; set; }

    [Parameter]
    public string link { get; set; }

    [Parameter]
    public string operation { get; set; }

    private List<Category> categories = new List<Category>();

    private Stack<int> steps = new Stack<int>();

    private string search = string.Empty;

    private Timer timer = new Timer
    {
        Interval = 250,
        AutoReset = false
    };

    private int tab = 0;

    private string[] styles = { "nav-link active", "nav-link", "nav-link", "nav-link" };

    protected override async Task OnInitializedAsync()
    {
        timer.Elapsed += Elapsed;
        await FetchCategoriesAsync();
        if (operation == "Update")
        {
            for (int i = 1; i <= recipe.Directions.Count(); i++)
            {
                steps.Push(i);
            }
        }
    }

    public async Task SubmitAsync(EditContext editContext)
    {
        int pops = recipe.Directions.Count();
        if (editContext.Validate())
        {
            int id = recipe.Id;
            switch (operation)
            {
                case "Create":
                    id = await RecipeService.CreateAsync(recipe);
                    break;
                case "Update":
                    await RecipeService.UpdateAsync(recipe);
                    break;
            }
            NavigationManager.NavigateTo($"/Recipes/Read/{id}");
        }
        else
        {
            pops -= recipe.Directions.Count();
            for (int i = 0; i < pops; i++)
            {
                steps.Pop();
            }
        }
    }

    public async Task EnterCategoryAsync(KeyboardEventArgs args)
    {
        timer.Stop();
        if (args.Key == "Enter")
        {
            Category category = await CategoryService.GetAsync(search);
            if (category == null) category = new Category { Name = search };
            await AddCategoryAsync(category);
        }
        timer.Start();
    }

    public async Task AddCategoryAsync(Category category)
    {
        RecipeCategory recipeCategory = new RecipeCategory { Category = category };
        recipe.RecipeCategories.Add(recipeCategory);
        search = string.Empty;
        await FetchCategoriesAsync();
    }

    public async Task RemoveCategoryAsync(RecipeCategory recipeCategory)
    {
        recipe.RecipeCategories.Remove(recipeCategory);
        await FetchCategoriesAsync();
    }

    public void AddDirection()
    {
        int count = recipe.Directions.Count() + 1;
        Direction direction = new Direction { Step = count };
        recipe.Directions.Add(direction);
        steps.Push(count);
    }

    public void RemoveDirection(Direction direction)
    {
        recipe.Directions.Remove(direction);
        steps.Pop();
    }

    public void ToggleTab(int number)
    {
        for (int i = 0; i < styles.Count(); i++)
        {
            styles[i] = "nav-link";
        }
        tab = number;
        styles[number] = string.Concat(styles[number], " active");
    }

    public async Task FetchCategoriesAsync()
    {
        categories = await CategoryService.FetchAsync(recipe.RecipeCategories, search);
        StateHasChanged();
    }

    public void Elapsed(Object source, ElapsedEventArgs args)
    {
        InvokeAsync(async () => await FetchCategoriesAsync());
    }
}